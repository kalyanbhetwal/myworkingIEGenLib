# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _iegenlib
else:
    import _iegenlib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _iegenlib.delete_SwigPyIterator

    def value(self):
        return _iegenlib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _iegenlib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _iegenlib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _iegenlib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _iegenlib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _iegenlib.SwigPyIterator_copy(self)

    def next(self):
        return _iegenlib.SwigPyIterator_next(self)

    def __next__(self):
        return _iegenlib.SwigPyIterator___next__(self)

    def previous(self):
        return _iegenlib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _iegenlib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _iegenlib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _iegenlib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _iegenlib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _iegenlib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _iegenlib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _iegenlib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _iegenlib:
_iegenlib.SwigPyIterator_swigregister(SwigPyIterator)

class PairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _iegenlib.PairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _iegenlib.PairVector___nonzero__(self)

    def __bool__(self):
        return _iegenlib.PairVector___bool__(self)

    def __len__(self):
        return _iegenlib.PairVector___len__(self)

    def __getslice__(self, i, j):
        return _iegenlib.PairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _iegenlib.PairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _iegenlib.PairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _iegenlib.PairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _iegenlib.PairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _iegenlib.PairVector___setitem__(self, *args)

    def pop(self):
        return _iegenlib.PairVector_pop(self)

    def append(self, x):
        return _iegenlib.PairVector_append(self, x)

    def empty(self):
        return _iegenlib.PairVector_empty(self)

    def size(self):
        return _iegenlib.PairVector_size(self)

    def swap(self, v):
        return _iegenlib.PairVector_swap(self, v)

    def begin(self):
        return _iegenlib.PairVector_begin(self)

    def end(self):
        return _iegenlib.PairVector_end(self)

    def rbegin(self):
        return _iegenlib.PairVector_rbegin(self)

    def rend(self):
        return _iegenlib.PairVector_rend(self)

    def clear(self):
        return _iegenlib.PairVector_clear(self)

    def get_allocator(self):
        return _iegenlib.PairVector_get_allocator(self)

    def pop_back(self):
        return _iegenlib.PairVector_pop_back(self)

    def erase(self, *args):
        return _iegenlib.PairVector_erase(self, *args)

    def __init__(self, *args):
        _iegenlib.PairVector_swiginit(self, _iegenlib.new_PairVector(*args))

    def push_back(self, x):
        return _iegenlib.PairVector_push_back(self, x)

    def front(self):
        return _iegenlib.PairVector_front(self)

    def back(self):
        return _iegenlib.PairVector_back(self)

    def assign(self, n, x):
        return _iegenlib.PairVector_assign(self, n, x)

    def resize(self, *args):
        return _iegenlib.PairVector_resize(self, *args)

    def insert(self, *args):
        return _iegenlib.PairVector_insert(self, *args)

    def reserve(self, n):
        return _iegenlib.PairVector_reserve(self, n)

    def capacity(self):
        return _iegenlib.PairVector_capacity(self)
    __swig_destroy__ = _iegenlib.delete_PairVector

# Register PairVector in _iegenlib:
_iegenlib.PairVector_swigregister(PairVector)

Monotonic_NONE = _iegenlib.Monotonic_NONE
Monotonic_Nondecreasing = _iegenlib.Monotonic_Nondecreasing
Monotonic_Increasing = _iegenlib.Monotonic_Increasing
Monotonic_Nonincreasing = _iegenlib.Monotonic_Nonincreasing
Monotonic_Decreasing = _iegenlib.Monotonic_Decreasing
class UninterpFunc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _iegenlib.delete_UninterpFunc

    def __init__(self, *args):
        _iegenlib.UninterpFunc_swiginit(self, _iegenlib.new_UninterpFunc(*args))

    def __assign__(self, other):
        return _iegenlib.UninterpFunc___assign__(self, other)

    def getName(self):
        return _iegenlib.UninterpFunc_getName(self)

    def getDomain(self):
        return _iegenlib.UninterpFunc_getDomain(self)

    def getRange(self):
        return _iegenlib.UninterpFunc_getRange(self)

    def isBijective(self):
        return _iegenlib.UninterpFunc_isBijective(self)

    def getMonoType(self):
        return _iegenlib.UninterpFunc_getMonoType(self)

    def toString(self):
        return _iegenlib.UninterpFunc_toString(self)

# Register UninterpFunc in _iegenlib:
_iegenlib.UninterpFunc_swigregister(UninterpFunc)

class SubMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _iegenlib.SubMap_swiginit(self, _iegenlib.new_SubMap())
    __swig_destroy__ = _iegenlib.delete_SubMap

    def insertPair(self, factor, e):
        return _iegenlib.SubMap_insertPair(self, factor, e)

    def startIter(self):
        return _iegenlib.SubMap_startIter(self)

    def hasNext(self):
        return _iegenlib.SubMap_hasNext(self)

    def next(self):
        return _iegenlib.SubMap_next(self)

    def subExp(self, factor):
        return _iegenlib.SubMap_subExp(self, factor)

    def toString(self):
        return _iegenlib.SubMap_toString(self)

# Register SubMap in _iegenlib:
_iegenlib.SubMap_swigregister(SubMap)

class TupleDecl(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _iegenlib.delete_TupleDecl

    def size(self):
        return _iegenlib.TupleDecl_size(self)

    @staticmethod
    def sDefaultTupleVarName(loc):
        return _iegenlib.TupleDecl_sDefaultTupleVarName(loc)

    @staticmethod
    def sDefaultTupleDecl(arity):
        return _iegenlib.TupleDecl_sDefaultTupleDecl(arity)

    def __init__(self, *args):
        _iegenlib.TupleDecl_swiginit(self, _iegenlib.new_TupleDecl(*args))

    def __assign__(self, other):
        return _iegenlib.TupleDecl___assign__(self, other)

    def __lt__(self, other):
        return _iegenlib.TupleDecl___lt__(self, other)

    def __eq__(self, other):
        return _iegenlib.TupleDecl___eq__(self, other)

    def concat(self, other):
        return _iegenlib.TupleDecl_concat(self, other)

    def clone(self):
        return _iegenlib.TupleDecl_clone(self)

    def toString(self, withBrackets=False, aritySplit=0, generic=False):
        return _iegenlib.TupleDecl_toString(self, withBrackets, aritySplit, generic)

    def toStringForOmega(self, isRel, withBrackets=False, aritySplit=0, generic=False):
        return _iegenlib.TupleDecl_toStringForOmega(self, isRel, withBrackets, aritySplit, generic)

    def setTupleElem(self, *args):
        return _iegenlib.TupleDecl_setTupleElem(self, *args)

    def copyTupleElem(self, other, elem_loc_from, elem_loc_to):
        return _iegenlib.TupleDecl_copyTupleElem(self, other, elem_loc_from, elem_loc_to)

    def elemToString(self, elem_loc, generic=False):
        return _iegenlib.TupleDecl_elemToString(self, elem_loc, generic)

    def elemIsConst(self, elem_loc):
        return _iegenlib.TupleDecl_elemIsConst(self, elem_loc)

    def elemConstVal(self, elem_loc):
        return _iegenlib.TupleDecl_elemConstVal(self, elem_loc)

    def elemVarString(self, elem_loc):
        return _iegenlib.TupleDecl_elemVarString(self, elem_loc)

    def getSize(self):
        return _iegenlib.TupleDecl_getSize(self)

    def elemCreateTerm(self, view_elem_loc, use_elem_loc):
        return _iegenlib.TupleDecl_elemCreateTerm(self, view_elem_loc, use_elem_loc)

# Register TupleDecl in _iegenlib:
_iegenlib.TupleDecl_swigregister(TupleDecl)

def TupleDecl_sDefaultTupleVarName(loc):
    return _iegenlib.TupleDecl_sDefaultTupleVarName(loc)

def TupleDecl_sDefaultTupleDecl(arity):
    return _iegenlib.TupleDecl_sDefaultTupleDecl(arity)


def setCurrEnv():
    return _iegenlib.setCurrEnv()

def appendCurrEnv(funcName, domain, range, bijective, monoType):
    return _iegenlib.appendCurrEnv(funcName, domain, range, bijective, monoType)

def queryInverseCurrEnv(funcName):
    return _iegenlib.queryInverseCurrEnv(funcName)

def queryDomainCurrEnv(funcName):
    return _iegenlib.queryDomainCurrEnv(funcName)

def queryRangeCurrEnv(funcName):
    return _iegenlib.queryRangeCurrEnv(funcName)

def queryMonoTypeEnv(funcName):
    return _iegenlib.queryMonoTypeEnv(funcName)

def queryRangeArityCurrEnv(funcName):
    return _iegenlib.queryRangeArityCurrEnv(funcName)

def queryDomainArityCurrEnv(funcName):
    return _iegenlib.queryDomainArityCurrEnv(funcName)

def addUniQuantRule(uqRule):
    return _iegenlib.addUniQuantRule(uqRule)

def queryNoUniQuantRules():
    return _iegenlib.queryNoUniQuantRules()

def queryUniQuantRuleEnv(idx):
    return _iegenlib.queryUniQuantRuleEnv(idx)

def getUQRForFuncDomainRange(func):
    return _iegenlib.getUQRForFuncDomainRange(func)
class Environment(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _iegenlib.Environment_swiginit(self, _iegenlib.new_Environment(*args))

    def __assign__(self, other):
        return _iegenlib.Environment___assign__(self, other)
    __swig_destroy__ = _iegenlib.delete_Environment

    def append(self, other):
        return _iegenlib.Environment_append(self, other)

    def reset(self):
        return _iegenlib.Environment_reset(self)

    def setInverse(self, funcName, inverseName):
        return _iegenlib.Environment_setInverse(self, funcName, inverseName)

    def funcInverse(self, funcName):
        return _iegenlib.Environment_funcInverse(self, funcName)

    def hasInverse(self, funcName):
        return _iegenlib.Environment_hasInverse(self, funcName)

    def funcDomain(self, funcName):
        return _iegenlib.Environment_funcDomain(self, funcName)

    def funcRange(self, funcName):
        return _iegenlib.Environment_funcRange(self, funcName)

    def funcMonoType(self, funcName):
        return _iegenlib.Environment_funcMonoType(self, funcName)

    def toString(self):
        return _iegenlib.Environment_toString(self)

    def addUniQuantRule(self, uqRule):
        return _iegenlib.Environment_addUniQuantRule(self, uqRule)

    def getNoUniQuantRules(self):
        return _iegenlib.Environment_getNoUniQuantRules(self)

    def getUniQuantRule(self, idx):
        return _iegenlib.Environment_getUniQuantRule(self, idx)

# Register Environment in _iegenlib:
_iegenlib.Environment_swigregister(Environment)

Monotonicity = _iegenlib.Monotonicity
CoMonotonicity = _iegenlib.CoMonotonicity
Triangularity = _iegenlib.Triangularity
DomainRange = _iegenlib.DomainRange
FuncConsistency = _iegenlib.FuncConsistency
TheOthers = _iegenlib.TheOthers
class UniQuantRule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _iegenlib.delete_UniQuantRule

    def __init__(self, *args):
        _iegenlib.UniQuantRule_swiginit(self, _iegenlib.new_UniQuantRule(*args))

    def __assign__(self, other):
        return _iegenlib.UniQuantRule___assign__(self, other)

    def swap(self, second):
        return _iegenlib.UniQuantRule_swap(self, second)

    def toString(self):
        return _iegenlib.UniQuantRule_toString(self)

    def getType(self):
        return _iegenlib.UniQuantRule_getType(self)

    def getLeftSide(self):
        return _iegenlib.UniQuantRule_getLeftSide(self)

    def getRightSide(self):
        return _iegenlib.UniQuantRule_getRightSide(self)

    def getZ3Form(self, relevantUFSs, glVarSyms, cc):
        return _iegenlib.UniQuantRule_getZ3Form(self, relevantUFSs, glVarSyms, cc)

# Register UniQuantRule in _iegenlib:
_iegenlib.UniQuantRule_swigregister(UniQuantRule)
cvar = _iegenlib.cvar


def compareFileContentsToString(file, contents):
    return _iegenlib.compareFileContentsToString(file, contents)

def createUniqueName(name, taken):
    return _iegenlib.createUniqueName(name, taken)

def replaceInString(input, toFind, replaceWith, startPos=0):
    return _iegenlib.replaceInString(input, toFind, replaceWith, startPos)

def generateDotLabel(*args):
    return _iegenlib.generateDotLabel(*args)
class assert_exception(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, error_message):
        _iegenlib.assert_exception_swiginit(self, _iegenlib.new_assert_exception(error_message))
    __swig_destroy__ = _iegenlib.delete_assert_exception

# Register assert_exception in _iegenlib:
_iegenlib.assert_exception_swigregister(assert_exception)

class parse_exception(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, error_message):
        _iegenlib.parse_exception_swiginit(self, _iegenlib.new_parse_exception(error_message))
    __swig_destroy__ = _iegenlib.delete_parse_exception

# Register parse_exception in _iegenlib:
_iegenlib.parse_exception_swigregister(parse_exception)

class StringIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _iegenlib.StringIterator_swiginit(self, _iegenlib.new_StringIterator(*args))

    def next(self):
        return _iegenlib.StringIterator_next(self)

    def hasNext(self):
        return _iegenlib.StringIterator_hasNext(self)
    __swig_destroy__ = _iegenlib.delete_StringIterator

# Register StringIterator in _iegenlib:
_iegenlib.StringIterator_swigregister(StringIterator)

class Term(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _iegenlib.Term_swiginit(self, _iegenlib.new_Term(*args))

    def __assign__(self, other):
        return _iegenlib.Term___assign__(self, other)
    __swig_destroy__ = _iegenlib.delete_Term

    def __lt__(self, other):
        return _iegenlib.Term___lt__(self, other)

    def __eq__(self, other):
        return _iegenlib.Term___eq__(self, other)

    def clone(self):
        return _iegenlib.Term_clone(self)

    def toString(self, absValue=False, generic=False):
        return _iegenlib.Term_toString(self, absValue, generic)

    def __str__(self, aTupleDecl, absValue=False):
        return _iegenlib.Term___str__(self, aTupleDecl, absValue)

    def toDotString(self, absValue=False):
        return _iegenlib.Term_toDotString(self, absValue)

    def coefficient(self):
        return _iegenlib.Term_coefficient(self)

    def setCoefficient(self, coeff):
        return _iegenlib.Term_setCoefficient(self, coeff)

    def isUFCall(self):
        return _iegenlib.Term_isUFCall(self)

    def isTupleExp(self):
        return _iegenlib.Term_isTupleExp(self)

    def isConst(self):
        return _iegenlib.Term_isConst(self)

    def multiplyBy(self, constant):
        return _iegenlib.Term_multiplyBy(self, constant)

    def divideBy(self, divisor):
        return _iegenlib.Term_divideBy(self, divisor)

    def factorMatches(self, other):
        return _iegenlib.Term_factorMatches(self, other)

    def combine(self, other):
        return _iegenlib.Term_combine(self, other)

    def type(self):
        return _iegenlib.Term_type(self)

    def collapseNestedInvertibleFunctions(self):
        return _iegenlib.Term_collapseNestedInvertibleFunctions(self)

    def acceptVisitor(self, v):
        return _iegenlib.Term_acceptVisitor(self, v)

# Register Term in _iegenlib:
_iegenlib.Term_swigregister(Term)

class UFCallTerm(Term):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _iegenlib.UFCallTerm_swiginit(self, _iegenlib.new_UFCallTerm(*args))

    def __assign__(self, other):
        return _iegenlib.UFCallTerm___assign__(self, other)

    def reset(self):
        return _iegenlib.UFCallTerm_reset(self)
    __swig_destroy__ = _iegenlib.delete_UFCallTerm

    def __lt__(self, other):
        return _iegenlib.UFCallTerm___lt__(self, other)

    def clone(self):
        return _iegenlib.UFCallTerm_clone(self)

    def toString(self, absValue=False, generic=False):
        return _iegenlib.UFCallTerm_toString(self, absValue, generic)

    def __str__(self, aTupleDecl, absValue=False):
        return _iegenlib.UFCallTerm___str__(self, aTupleDecl, absValue)

    def toDotString(self, absValue=False):
        return _iegenlib.UFCallTerm_toDotString(self, absValue)

    def type(self):
        return _iegenlib.UFCallTerm_type(self)

    def isUFCall(self):
        return _iegenlib.UFCallTerm_isUFCall(self)

    def isConst(self):
        return _iegenlib.UFCallTerm_isConst(self)

    def numArgs(self):
        return _iegenlib.UFCallTerm_numArgs(self)

    def resetNumArgs(self, newNumArgs):
        return _iegenlib.UFCallTerm_resetNumArgs(self, newNumArgs)

    def setParamExp(self, i, param_exp):
        return _iegenlib.UFCallTerm_setParamExp(self, i, param_exp)

    def getParamExp(self, i):
        return _iegenlib.UFCallTerm_getParamExp(self, i)

    def isIndexed(self):
        return _iegenlib.UFCallTerm_isIndexed(self)

    def nonIndexedClone(self):
        return _iegenlib.UFCallTerm_nonIndexedClone(self)

    def tupleIndex(self):
        return _iegenlib.UFCallTerm_tupleIndex(self)

    def setTupleIndex(self, idx):
        return _iegenlib.UFCallTerm_setTupleIndex(self, idx)

    def size(self):
        return _iegenlib.UFCallTerm_size(self)

    def name(self):
        return _iegenlib.UFCallTerm_name(self)

    def setName(self, n):
        return _iegenlib.UFCallTerm_setName(self, n)

    def collapseNestedInvertibleFunctions(self):
        return _iegenlib.UFCallTerm_collapseNestedInvertibleFunctions(self)

    def factorMatches(self, other):
        return _iegenlib.UFCallTerm_factorMatches(self, other)

    def acceptVisitor(self, v):
        return _iegenlib.UFCallTerm_acceptVisitor(self, v)

# Register UFCallTerm in _iegenlib:
_iegenlib.UFCallTerm_swigregister(UFCallTerm)

class TupleVarTerm(Term):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _iegenlib.TupleVarTerm_swiginit(self, _iegenlib.new_TupleVarTerm(*args))

    def __assign__(self, other):
        return _iegenlib.TupleVarTerm___assign__(self, other)

    def __lt__(self, other):
        return _iegenlib.TupleVarTerm___lt__(self, other)

    def clone(self):
        return _iegenlib.TupleVarTerm_clone(self)

    def toString(self, absValue=False, generic=False):
        return _iegenlib.TupleVarTerm_toString(self, absValue, generic)

    def __str__(self, aTupleDecl, absValue=False):
        return _iegenlib.TupleVarTerm___str__(self, aTupleDecl, absValue)

    def type(self):
        return _iegenlib.TupleVarTerm_type(self)

    def isConst(self):
        return _iegenlib.TupleVarTerm_isConst(self)

    def tvloc(self):
        return _iegenlib.TupleVarTerm_tvloc(self)

    def factorMatches(self, other):
        return _iegenlib.TupleVarTerm_factorMatches(self, other)

    def remapLocation(self, oldToNewLocs):
        return _iegenlib.TupleVarTerm_remapLocation(self, oldToNewLocs)

    def acceptVisitor(self, v):
        return _iegenlib.TupleVarTerm_acceptVisitor(self, v)
    __swig_destroy__ = _iegenlib.delete_TupleVarTerm

# Register TupleVarTerm in _iegenlib:
_iegenlib.TupleVarTerm_swigregister(TupleVarTerm)

class VarTerm(Term):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _iegenlib.VarTerm_swiginit(self, _iegenlib.new_VarTerm(*args))

    def __assign__(self, other):
        return _iegenlib.VarTerm___assign__(self, other)

    def __lt__(self, other):
        return _iegenlib.VarTerm___lt__(self, other)

    def clone(self):
        return _iegenlib.VarTerm_clone(self)

    def toString(self, absValue=False, generic=False):
        return _iegenlib.VarTerm_toString(self, absValue, generic)

    def __str__(self, aTupleDecl, absValue=False):
        return _iegenlib.VarTerm___str__(self, aTupleDecl, absValue)

    def symbol(self):
        return _iegenlib.VarTerm_symbol(self)

    def type(self):
        return _iegenlib.VarTerm_type(self)

    def isConst(self):
        return _iegenlib.VarTerm_isConst(self)

    def factorMatches(self, other):
        return _iegenlib.VarTerm_factorMatches(self, other)

    def acceptVisitor(self, v):
        return _iegenlib.VarTerm_acceptVisitor(self, v)
    __swig_destroy__ = _iegenlib.delete_VarTerm

# Register VarTerm in _iegenlib:
_iegenlib.VarTerm_swigregister(VarTerm)

class TupleExpTerm(Term):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def reset(self):
        return _iegenlib.TupleExpTerm_reset(self)
    __swig_destroy__ = _iegenlib.delete_TupleExpTerm

    def __init__(self, *args):
        _iegenlib.TupleExpTerm_swiginit(self, _iegenlib.new_TupleExpTerm(*args))

    def __assign__(self, other):
        return _iegenlib.TupleExpTerm___assign__(self, other)

    def __lt__(self, other):
        return _iegenlib.TupleExpTerm___lt__(self, other)

    def combine(self, other):
        return _iegenlib.TupleExpTerm_combine(self, other)

    def clone(self):
        return _iegenlib.TupleExpTerm_clone(self)

    def toString(self, absValue=False, generic=False):
        return _iegenlib.TupleExpTerm_toString(self, absValue, generic)

    def __str__(self, aTupleDecl, absValue=False):
        return _iegenlib.TupleExpTerm___str__(self, aTupleDecl, absValue)

    def toDotString(self, absValue=False):
        return _iegenlib.TupleExpTerm_toDotString(self, absValue)

    def type(self):
        return _iegenlib.TupleExpTerm_type(self)

    def isTupleExp(self):
        return _iegenlib.TupleExpTerm_isTupleExp(self)

    def isConst(self):
        return _iegenlib.TupleExpTerm_isConst(self)

    def setExpElem(self, exp_index, exp):
        return _iegenlib.TupleExpTerm_setExpElem(self, exp_index, exp)

    def getExpElem(self, exp_index):
        return _iegenlib.TupleExpTerm_getExpElem(self, exp_index)

    def cloneExp(self, exp_index):
        return _iegenlib.TupleExpTerm_cloneExp(self, exp_index)

    def size(self):
        return _iegenlib.TupleExpTerm_size(self)

    def factorMatches(self, other):
        return _iegenlib.TupleExpTerm_factorMatches(self, other)

    def acceptVisitor(self, v):
        return _iegenlib.TupleExpTerm_acceptVisitor(self, v)

# Register TupleExpTerm in _iegenlib:
_iegenlib.TupleExpTerm_swigregister(TupleExpTerm)

class Exp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _iegenlib.Exp_swiginit(self, _iegenlib.new_Exp(*args))

    def __assign__(self, other):
        return _iegenlib.Exp___assign__(self, other)

    def reset(self):
        return _iegenlib.Exp_reset(self)
    __swig_destroy__ = _iegenlib.delete_Exp

    def clone(self):
        return _iegenlib.Exp_clone(self)

    def toString(self, generic=False):
        return _iegenlib.Exp_toString(self, generic)

    def __str__(self, aTupleDecl):
        return _iegenlib.Exp___str__(self, aTupleDecl)

    def addTerm(self, term):
        return _iegenlib.Exp_addTerm(self, term)

    def addExp(self, exp):
        return _iegenlib.Exp_addExp(self, exp)

    def multiplyBy(self, constant):
        return _iegenlib.Exp_multiplyBy(self, constant)

    def isDivisible(self, divisor):
        return _iegenlib.Exp_isDivisible(self, divisor)

    def divideBy(self, divisor):
        return _iegenlib.Exp_divideBy(self, divisor)

    def solveForFactor(self, factor):
        return _iegenlib.Exp_solveForFactor(self, factor)

    def invertFuncToExposeFactor(self, factor):
        return _iegenlib.Exp_invertFuncToExposeFactor(self, factor)

    def substitute(self, searchTermToSubExp):
        return _iegenlib.Exp_substitute(self, searchTermToSubExp)

    def normalizeForEquality(self):
        return _iegenlib.Exp_normalizeForEquality(self)

    def collapseNestedInvertibleFunctions(self):
        return _iegenlib.Exp_collapseNestedInvertibleFunctions(self)

    def dependsOn(self, factor):
        return _iegenlib.Exp_dependsOn(self, factor)

    def hasIndexedUFCall(self):
        return _iegenlib.Exp_hasIndexedUFCall(self)

    def cloneIndexedUFCallTerm(self):
        return _iegenlib.Exp_cloneIndexedUFCallTerm(self)

    def equalsZero(self):
        return _iegenlib.Exp_equalsZero(self)

    def __lt__(self, other):
        return _iegenlib.Exp___lt__(self, other)

    def __eq__(self, *args):
        return _iegenlib.Exp___eq__(self, *args)

    def remapTupleVars(self, oldToNewLocs):
        return _iegenlib.Exp_remapTupleVars(self, oldToNewLocs)

    def setExpression(self):
        return _iegenlib.Exp_setExpression(self)

    def setInequality(self):
        return _iegenlib.Exp_setInequality(self)

    def setEquality(self):
        return _iegenlib.Exp_setEquality(self)

    def isExpression(self):
        return _iegenlib.Exp_isExpression(self)

    def isInequality(self):
        return _iegenlib.Exp_isInequality(self)

    def isEquality(self):
        return _iegenlib.Exp_isEquality(self)

    def isConst(self):
        return _iegenlib.Exp_isConst(self)

    def isContradiction(self):
        return _iegenlib.Exp_isContradiction(self)

    def getTerm(self):
        return _iegenlib.Exp_getTerm(self)

    def getConstTerm(self):
        return _iegenlib.Exp_getConstTerm(self)

    def toDotString(self, *args):
        return _iegenlib.Exp_toDotString(self, *args)

    def getSymbolIterator(self):
        return _iegenlib.Exp_getSymbolIterator(self)

    def acceptVisitor(self, v):
        return _iegenlib.Exp_acceptVisitor(self, v)

    def getTermList(self):
        return _iegenlib.Exp_getTermList(self)

# Register Exp in _iegenlib:
_iegenlib.Exp_swigregister(Exp)


def parse_set(set_string):
    return _iegenlib.parse_set(set_string)

def parse_relation(relation_string):
    return _iegenlib.parse_relation(relation_string)
class Conjunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _iegenlib.Conjunction_swiginit(self, _iegenlib.new_Conjunction(*args))

    def __assign__(self, other):
        return _iegenlib.Conjunction___assign__(self, other)

    def reset(self):
        return _iegenlib.Conjunction_reset(self)
    __swig_destroy__ = _iegenlib.delete_Conjunction

    def clone(self):
        return _iegenlib.Conjunction_clone(self)

    def __lt__(self, other):
        return _iegenlib.Conjunction___lt__(self, other)

    def setInArity(self, inarity):
        return _iegenlib.Conjunction_setInArity(self, inarity)

    def getTupleDecl(self):
        return _iegenlib.Conjunction_getTupleDecl(self)

    def setTupleDecl(self, *args):
        return _iegenlib.Conjunction_setTupleDecl(self, *args)

    def addEquality(self, equality):
        return _iegenlib.Conjunction_addEquality(self, equality)

    def addInequality(self, inequality):
        return _iegenlib.Conjunction_addInequality(self, inequality)

    def equalities(self):
        return _iegenlib.Conjunction_equalities(self)

    def inequalities(self):
        return _iegenlib.Conjunction_inequalities(self)

    def substituteTupleDecl(self):
        return _iegenlib.Conjunction_substituteTupleDecl(self)

    def copyConstraintsFrom(self, source):
        return _iegenlib.Conjunction_copyConstraintsFrom(self, source)

    def substituteInConstraints(self, searchTermToSubExp):
        return _iegenlib.Conjunction_substituteInConstraints(self, searchTermToSubExp)

    def toString(self):
        return _iegenlib.Conjunction_toString(self)

    def __str__(self):
        return _iegenlib.Conjunction___str__(self)

    def prettyPrintStringForOmega(self, isRel):
        return _iegenlib.Conjunction_prettyPrintStringForOmega(self, isRel)

    def toDotString(self, *args):
        return _iegenlib.Conjunction_toDotString(self, *args)

    def getSymbolIterator(self):
        return _iegenlib.Conjunction_getSymbolIterator(self)

    def getTupleIterator(self):
        return _iegenlib.Conjunction_getTupleIterator(self)

    def arity(self):
        return _iegenlib.Conjunction_arity(self)

    def inarity(self):
        return _iegenlib.Conjunction_inarity(self)

    def hasConstraints(self):
        return _iegenlib.Conjunction_hasConstraints(self)

    def findFunction(self, tupleLocToFind, startTupleRange, endTupleRange):
        return _iegenlib.Conjunction_findFunction(self, tupleLocToFind, startTupleRange, endTupleRange)

    def findAndRemoveFunction(self, tupleLocToFind, startTupleRange, endTupleRange):
        return _iegenlib.Conjunction_findAndRemoveFunction(self, tupleLocToFind, startTupleRange, endTupleRange)

    def Compose(self, rhs, innerArity):
        return _iegenlib.Conjunction_Compose(self, rhs, innerArity)

    def Apply(self, rhs):
        return _iegenlib.Conjunction_Apply(self, rhs)

    def Inverse(self):
        return _iegenlib.Conjunction_Inverse(self)

    def Intersect(self, rhs):
        return _iegenlib.Conjunction_Intersect(self, rhs)

    def IntersectOnInputTuple(self, rhs, lhsShift, rhsShift, resultInArity):
        return _iegenlib.Conjunction_IntersectOnInputTuple(self, rhs, lhsShift, rhsShift, resultInArity)

    def Restrict(self, rhs):
        return _iegenlib.Conjunction_Restrict(self, rhs)

    def TransitiveClosure(self):
        return _iegenlib.Conjunction_TransitiveClosure(self)

    def boundTupleExp(self, tuple_exp):
        return _iegenlib.Conjunction_boundTupleExp(self, tuple_exp)

    def satisfiable(self):
        return _iegenlib.Conjunction_satisfiable(self)

    def pushConstToConstraints(self):
        return _iegenlib.Conjunction_pushConstToConstraints(self)

    def pushConstConstraintsToTupleDecl(self):
        return _iegenlib.Conjunction_pushConstConstraintsToTupleDecl(self)

    def remapTupleVars(self, oldToNewLocs):
        return _iegenlib.Conjunction_remapTupleVars(self, oldToNewLocs)

    def cleanUp(self):
        return _iegenlib.Conjunction_cleanUp(self)

    def groupIndexedUFCalls(self):
        return _iegenlib.Conjunction_groupIndexedUFCalls(self)

    def isFunction(self, inArity):
        return _iegenlib.Conjunction_isFunction(self, inArity)

    def isFunctionInverse(self, inArity):
        return _iegenlib.Conjunction_isFunctionInverse(self, inArity)

    def acceptVisitor(self, v):
        return _iegenlib.Conjunction_acceptVisitor(self, v)

    def isConstBounded(self, t):
        return _iegenlib.Conjunction_isConstBounded(self, t)

    def setUnsat(self):
        return _iegenlib.Conjunction_setUnsat(self)

    def isUnsat(self):
        return _iegenlib.Conjunction_isUnsat(self)

# Register Conjunction in _iegenlib:
_iegenlib.Conjunction_swigregister(Conjunction)

class SparseConstraints(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _iegenlib.SparseConstraints_swiginit(self, _iegenlib.new_SparseConstraints(*args))

    def __assign__(self, other):
        return _iegenlib.SparseConstraints___assign__(self, other)

    def reset(self):
        return _iegenlib.SparseConstraints_reset(self)
    __swig_destroy__ = _iegenlib.delete_SparseConstraints

    def __lt__(self, other):
        return _iegenlib.SparseConstraints___lt__(self, other)

    def getTupleDecl(self):
        return _iegenlib.SparseConstraints_getTupleDecl(self)

    def setTupleDecl(self, *args):
        return _iegenlib.SparseConstraints_setTupleDecl(self, *args)

    def addConjunction(self, adoptedConjunction):
        return _iegenlib.SparseConstraints_addConjunction(self, adoptedConjunction)

    def conjunctionBegin(self):
        return _iegenlib.SparseConstraints_conjunctionBegin(self)

    def conjunctionEnd(self):
        return _iegenlib.SparseConstraints_conjunctionEnd(self)

    def arity(self):
        return _iegenlib.SparseConstraints_arity(self)

    def getTupleIterator(self):
        return _iegenlib.SparseConstraints_getTupleIterator(self)

    def toString(self, *args):
        return _iegenlib.SparseConstraints_toString(self, *args)

    def __str__(self, *args):
        return _iegenlib.SparseConstraints___str__(self, *args)

    def prettyPrintStringForOmega(self, *args):
        return _iegenlib.SparseConstraints_prettyPrintStringForOmega(self, *args)

    def toISLString(self, *args):
        return _iegenlib.SparseConstraints_toISLString(self, *args)

    def toOmegaString(self, *args):
        return _iegenlib.SparseConstraints_toOmegaString(self, *args)

    def toDotString(self):
        return _iegenlib.SparseConstraints_toDotString(self)

    def substituteInConstraints(self, searchTermToSubExp):
        return _iegenlib.SparseConstraints_substituteInConstraints(self, searchTermToSubExp)

    def pushConstToConstraints(self):
        return _iegenlib.SparseConstraints_pushConstToConstraints(self)

    def cleanUp(self):
        return _iegenlib.SparseConstraints_cleanUp(self)

    def remapTupleVars(self, oldToNewLocs):
        return _iegenlib.SparseConstraints_remapTupleVars(self, oldToNewLocs)

    def acceptVisitor(self, v):
        return _iegenlib.SparseConstraints_acceptVisitor(self, v)

    def isUFCallParam(self, tupleID):
        return _iegenlib.SparseConstraints_isUFCallParam(self, tupleID)

    def numUFCallConstsMustRemove(self, i, domainRangeConsts):
        return _iegenlib.SparseConstraints_numUFCallConstsMustRemove(self, i, domainRangeConsts)

    def removeUFCallConsts(self, i):
        return _iegenlib.SparseConstraints_removeUFCallConsts(self, i)

    def removeExpensiveConstraints(self, parallelTvs, mNumConstsToRemove, ignore):
        return _iegenlib.SparseConstraints_removeExpensiveConstraints(self, parallelTvs, mNumConstsToRemove, ignore)

    def indexUFCs(self):
        return _iegenlib.SparseConstraints_indexUFCs(self)

    def constraintsDifference(self, A):
        return _iegenlib.SparseConstraints_constraintsDifference(self, A)

    def isUnsat(self):
        return _iegenlib.SparseConstraints_isUnsat(self)

    def getNumConjuncts(self):
        return _iegenlib.SparseConstraints_getNumConjuncts(self)

    def complexityForPartialParallel(self, parallelTvs):
        return _iegenlib.SparseConstraints_complexityForPartialParallel(self, parallelTvs)

    def getZ3form(self, UFSyms, VarSyms, termDef=True):
        return _iegenlib.SparseConstraints_getZ3form(self, UFSyms, VarSyms, termDef)
    mConjunctions = property(_iegenlib.SparseConstraints_mConjunctions_get, _iegenlib.SparseConstraints_mConjunctions_set)

# Register SparseConstraints in _iegenlib:
_iegenlib.SparseConstraints_swigregister(SparseConstraints)

class Set(SparseConstraints):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def parseOmegaString(omegaString, ufMap):
        return _iegenlib.Set_parseOmegaString(omegaString, ufMap)

    def __init__(self, *args):
        _iegenlib.Set_swiginit(self, _iegenlib.new_Set(*args))
    __swig_destroy__ = _iegenlib.delete_Set

    def __assign__(self, other):
        return _iegenlib.Set___assign__(self, other)

    def __eq__(self, other):
        return _iegenlib.Set___eq__(self, other)

    def __ne__(self, other):
        return _iegenlib.Set___ne__(self, other)

    def __lt__(self, other):
        return _iegenlib.Set___lt__(self, other)

    def toDotString(self):
        return _iegenlib.Set_toDotString(self)

    def setTupleDecl(self, tuple_decl):
        return _iegenlib.Set_setTupleDecl(self, tuple_decl)

    def arity(self):
        return _iegenlib.Set_arity(self)

    def Union(self, rhs):
        return _iegenlib.Set_Union(self, rhs)

    def Hull(self):
        return _iegenlib.Set_Hull(self)

    def Intersect(self, rhs):
        return _iegenlib.Set_Intersect(self, rhs)

    def boundTupleExp(self, tuple_exp):
        return _iegenlib.Set_boundTupleExp(self, tuple_exp)

    def boundDomainRange(self):
        return _iegenlib.Set_boundDomainRange(self)

    def normalize(self, bdr=True):
        return _iegenlib.Set_normalize(self, bdr)

    def acceptVisitor(self, v):
        return _iegenlib.Set_acceptVisitor(self, v)

    def superAffineSet(self, ufcmap, boundUFCs=True):
        return _iegenlib.Set_superAffineSet(self, ufcmap, boundUFCs)

    def reverseAffineSubstitution(self, ufcmap):
        return _iegenlib.Set_reverseAffineSubstitution(self, ufcmap)

    def projectOut(self, tvar):
        return _iegenlib.Set_projectOut(self, tvar)

    def simplifyForPartialParallel(self, parallelTvs):
        return _iegenlib.Set_simplifyForPartialParallel(self, parallelTvs)

    def isDefault(self):
        return _iegenlib.Set_isDefault(self)

    def TransitiveClosure(self):
        return _iegenlib.Set_TransitiveClosure(self)

    def GetDomain(self, ufName):
        return _iegenlib.Set_GetDomain(self, ufName)

    def getArity(self):
        return _iegenlib.Set_getArity(self)

    def detectUnsatOrFindEqualities(self, useRule=None):
        return _iegenlib.Set_detectUnsatOrFindEqualities(self, useRule)

    def getString(self, generic=False):
        return _iegenlib.Set_getString(self, generic)

    def reOrdTV_OmegaCodeGen(self, parallelTvs):
        return _iegenlib.Set_reOrdTV_OmegaCodeGen(self, parallelTvs)

    def removeUPs(self):
        return _iegenlib.Set_removeUPs(self)

# Register Set in _iegenlib:
_iegenlib.Set_swigregister(Set)

def Set_parseOmegaString(omegaString, ufMap):
    return _iegenlib.Set_parseOmegaString(omegaString, ufMap)

class Relation(SparseConstraints):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _iegenlib.Relation_swiginit(self, _iegenlib.new_Relation(*args))

    def __assign__(self, *args):
        return _iegenlib.Relation___assign__(self, *args)

    def __eq__(self, other):
        return _iegenlib.Relation___eq__(self, other)

    def __ne__(self, other):
        return _iegenlib.Relation___ne__(self, other)

    def __lt__(self, other):
        return _iegenlib.Relation___lt__(self, other)
    __swig_destroy__ = _iegenlib.delete_Relation

    def toString(self):
        return _iegenlib.Relation_toString(self)

    def __str__(self):
        return _iegenlib.Relation___str__(self)

    def prettyPrintStringForOmega(self):
        return _iegenlib.Relation_prettyPrintStringForOmega(self)

    def toOmegaString(self, arg2):
        return _iegenlib.Relation_toOmegaString(self, arg2)

    def inArity(self):
        return _iegenlib.Relation_inArity(self)

    def outArity(self):
        return _iegenlib.Relation_outArity(self)

    def SetinArity(self, _in):
        return _iegenlib.Relation_SetinArity(self, _in)

    def SetoutArity(self, out):
        return _iegenlib.Relation_SetoutArity(self, out)

    def setTupleDecl(self, tuple_decl):
        return _iegenlib.Relation_setTupleDecl(self, tuple_decl)

    def arity(self):
        return _iegenlib.Relation_arity(self)

    def toDotString(self):
        return _iegenlib.Relation_toDotString(self)

    def Compose(self, rhs):
        return _iegenlib.Relation_Compose(self, rhs)

    def Apply(self, rhs):
        return _iegenlib.Relation_Apply(self, rhs)

    def Union(self, rhs):
        return _iegenlib.Relation_Union(self, rhs)

    def Intersect(self, rhs):
        return _iegenlib.Relation_Intersect(self, rhs)

    def IntersectOnInputTuple(self, rhs):
        return _iegenlib.Relation_IntersectOnInputTuple(self, rhs)

    def Restrict(self, rhs):
        return _iegenlib.Relation_Restrict(self, rhs)

    def Inverse(self):
        return _iegenlib.Relation_Inverse(self)

    def isFunction(self):
        return _iegenlib.Relation_isFunction(self)

    def isFunctionInverse(self):
        return _iegenlib.Relation_isFunctionInverse(self)

    def findFunction(self, tupleLocToFind, startTupleRange, endTupleRange):
        return _iegenlib.Relation_findFunction(self, tupleLocToFind, startTupleRange, endTupleRange)

    def addConjunction(self, adoptedConjunction):
        return _iegenlib.Relation_addConjunction(self, adoptedConjunction)

    def boundDomainRange(self):
        return _iegenlib.Relation_boundDomainRange(self)

    def normalize(self, bdr=True):
        return _iegenlib.Relation_normalize(self, bdr)

    def acceptVisitor(self, v):
        return _iegenlib.Relation_acceptVisitor(self, v)

    def superAffineRelation(self, *args):
        return _iegenlib.Relation_superAffineRelation(self, *args)

    def reverseAffineSubstitution(self, ufcmap):
        return _iegenlib.Relation_reverseAffineSubstitution(self, ufcmap)

    def projectOut(self, tvar):
        return _iegenlib.Relation_projectOut(self, tvar)

    def simplifyForPartialParallel(self, parallelTvs):
        return _iegenlib.Relation_simplifyForPartialParallel(self, parallelTvs)

    def isDefault(self):
        return _iegenlib.Relation_isDefault(self)

    def detectUnsatOrFindEqualities(self, useRule=None):
        return _iegenlib.Relation_detectUnsatOrFindEqualities(self, useRule)

    def getString(self, generic=False):
        return _iegenlib.Relation_getString(self, generic)

    def dataDependenceRelationship(self, rightSide, parallelLoopLevel=0):
        return _iegenlib.Relation_dataDependenceRelationship(self, rightSide, parallelLoopLevel)

    def solveForOutputTuple(self):
        return _iegenlib.Relation_solveForOutputTuple(self)

    def hasInverseFamily(self, expr):
        return _iegenlib.Relation_hasInverseFamily(self, expr)

    def getInverseFamily(self, exp):
        return _iegenlib.Relation_getInverseFamily(self, exp)

    def TransitiveClosure(self):
        return _iegenlib.Relation_TransitiveClosure(self)

    def GetDomain(self, ufName):
        return _iegenlib.Relation_GetDomain(self, ufName)

    def ToSet(self):
        return _iegenlib.Relation_ToSet(self)

    def Hull(self):
        return _iegenlib.Relation_Hull(self)

    @staticmethod
    def parseOmegaString(omegaString, ufMap):
        return _iegenlib.Relation_parseOmegaString(omegaString, ufMap)

    def getSymbolIterator(self):
        return _iegenlib.Relation_getSymbolIterator(self)

# Register Relation in _iegenlib:
_iegenlib.Relation_swigregister(Relation)

def Relation_parseOmegaString(omegaString, ufMap):
    return _iegenlib.Relation_parseOmegaString(omegaString, ufMap)


def passSetStrThruISL(sstr):
    return _iegenlib.passSetStrThruISL(sstr)

def passUnionSetStrThruISL(sstr):
    return _iegenlib.passUnionSetStrThruISL(sstr)

def passRelationStrThruISL(rstr):
    return _iegenlib.passRelationStrThruISL(rstr)

def passUnionRelationStrThruISL(rstr):
    return _iegenlib.passUnionRelationStrThruISL(rstr)

def passSetThruISL(s):
    return _iegenlib.passSetThruISL(s)

def passRelationThruISL(r):
    return _iegenlib.passRelationThruISL(r)

def instantiate(uqRule, x1, x2, ufcmap, origTupleDecl):
    return _iegenlib.instantiate(uqRule, x1, x2, ufcmap, origTupleDecl)

def ruleInstantiation(instExps, useRule, origTupleDecl, ufcmap):
    return _iegenlib.ruleInstantiation(instExps, useRule, origTupleDecl, ufcmap)

def islSetProjectOut(s, pos):
    return _iegenlib.islSetProjectOut(s, pos)

def islRelTransitiveClosure(r, isExact):
    return _iegenlib.islRelTransitiveClosure(r, isExact)

def islSetComplement(s):
    return _iegenlib.islSetComplement(s)

def string_get_next_char():
    return _iegenlib.string_get_next_char()

def parse_env(env_string):
    return _iegenlib.parse_env(env_string)

def set_parse_env_result(env):
    return _iegenlib.set_parse_env_result(env)

def set_parse_set_result(s):
    return _iegenlib.set_parse_set_result(s)

def set_parse_relation_result(s):
    return _iegenlib.set_parse_relation_result(s)

def set_parse_error(err):
    return _iegenlib.set_parse_error(err)

def get_parse_error():
    return _iegenlib.get_parse_error()

def clearAll():
    return _iegenlib.clearAll()
class Computation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _iegenlib.delete_Computation

    def __init__(self, *args):
        _iegenlib.Computation_swiginit(self, _iegenlib.new_Computation(*args))

    def __assign__(self, other):
        return _iegenlib.Computation___assign__(self, other)

    def __eq__(self, other):
        return _iegenlib.Computation___eq__(self, other)

    def __ne__(self, other):
        return _iegenlib.Computation___ne__(self, other)

    def getName(self):
        return _iegenlib.Computation_getName(self)

    def setName(self, newName):
        return _iegenlib.Computation_setName(self, newName)

    def getUniquelyNamedClone(self):
        return _iegenlib.Computation_getUniquelyNamedClone(self)

    @staticmethod
    def resetNumRenamesCounters():
        return _iegenlib.Computation_resetNumRenamesCounters()

    @staticmethod
    def getPrefixedDataSpaceName(originalName, prefix):
        return _iegenlib.Computation_getPrefixedDataSpaceName(originalName, prefix)

    @staticmethod
    def trimISDataSpaces(*args):
        return _iegenlib.Computation_trimISDataSpaces(*args)

    @staticmethod
    def isGuaranteedExecute(stmt1, stmt2):
        return _iegenlib.Computation_isGuaranteedExecute(stmt1, stmt2)

    @staticmethod
    def getSetConstraints(set):
        return _iegenlib.Computation_getSetConstraints(set)

    def addStmt(self, *args):
        return _iegenlib.Computation_addStmt(self, *args)

    def getStmt(self, index):
        return _iegenlib.Computation_getStmt(self, index)

    def getNumStmts(self):
        return _iegenlib.Computation_getNumStmts(self)

    def addDataSpace(self, dataSpaceName, dataSpaceType):
        return _iegenlib.Computation_addDataSpace(self, dataSpaceName, dataSpaceType)

    def getDataSpaces(self):
        return _iegenlib.Computation_getDataSpaces(self)

    def getDataSpaceType(self, arg2):
        return _iegenlib.Computation_getDataSpaceType(self, arg2)

    def isDataSpace(self, name):
        return _iegenlib.Computation_isDataSpace(self, name)

    def firstWriteIndex(self, dataSpace):
        return _iegenlib.Computation_firstWriteIndex(self, dataSpace)

    def replaceDataSpaceName(self, original, newString):
        return _iegenlib.Computation_replaceDataSpaceName(self, original, newString)

    def getDataSpaceRename(self, dataSpaceName):
        return _iegenlib.Computation_getDataSpaceRename(self, dataSpaceName)

    @staticmethod
    def getArrayAccessStrs(unroll, access, tuple, arrName, idxs):
        return _iegenlib.Computation_getArrayAccessStrs(unroll, access, tuple, arrName, idxs)

    @staticmethod
    def trimDataSpaceName(dataSpaceName):
        return _iegenlib.Computation_trimDataSpaceName(dataSpaceName)

    @staticmethod
    def getOriginalDataSpaceName(dataSpaceName):
        return _iegenlib.Computation_getOriginalDataSpaceName(dataSpaceName)

    @staticmethod
    def areEquivalentRenames(a, b):
        return _iegenlib.Computation_areEquivalentRenames(a, b)

    def addParameter(self, paramName, paramType):
        return _iegenlib.Computation_addParameter(self, paramName, paramType)

    def getParameterName(self, index):
        return _iegenlib.Computation_getParameterName(self, index)

    def getParameterType(self, index):
        return _iegenlib.Computation_getParameterType(self, index)

    def getParameters(self):
        return _iegenlib.Computation_getParameters(self)

    def isParameter(self, dataSpaceName):
        return _iegenlib.Computation_isParameter(self, dataSpaceName)

    def getNumParams(self):
        return _iegenlib.Computation_getNumParams(self)

    def addReturnValue(self, *args):
        return _iegenlib.Computation_addReturnValue(self, *args)

    def getReturnValues(self):
        return _iegenlib.Computation_getReturnValues(self)

    def getActiveOutValues(self):
        return _iegenlib.Computation_getActiveOutValues(self)

    def isReturnValue(self, dataSpaceName):
        return _iegenlib.Computation_isReturnValue(self, dataSpaceName)

    def getNumReturnValues(self):
        return _iegenlib.Computation_getNumReturnValues(self)

    def stmtsBegin(self):
        return _iegenlib.Computation_stmtsBegin(self)

    def stmtsEnd(self):
        return _iegenlib.Computation_stmtsEnd(self)

    def printInfo(self):
        return _iegenlib.Computation_printInfo(self)

    def isComplete(self):
        return _iegenlib.Computation_isComplete(self)

    def codeGenMemoryManagementString(self):
        return _iegenlib.Computation_codeGenMemoryManagementString(self)

    def clear(self):
        return _iegenlib.Computation_clear(self)

    def appendComputation(self, *args):
        return _iegenlib.Computation_appendComputation(self, *args)

    def finalize(self, deleteDeadNodes=False):
        return _iegenlib.Computation_finalize(self, deleteDeadNodes)

    def consistentSetArity(self, sets):
        return _iegenlib.Computation_consistentSetArity(self, sets)

    def padExecutionSchedules(self):
        return _iegenlib.Computation_padExecutionSchedules(self)

    def enforceArraySSA(self):
        return _iegenlib.Computation_enforceArraySSA(self)

    def adjustExecutionSchedules(self):
        return _iegenlib.Computation_adjustExecutionSchedules(self)

    def deleteDeadStatements(self):
        return _iegenlib.Computation_deleteDeadStatements(self)

    def toDotString(self, *args):
        return _iegenlib.Computation_toDotString(self, *args)

    def getStmtDebugStrings(self):
        return _iegenlib.Computation_getStmtDebugStrings(self)

    def addTransformation(self, stmtIndex, rel):
        return _iegenlib.Computation_addTransformation(self, stmtIndex, rel)

    def applyTransformations(self):
        return _iegenlib.Computation_applyTransformations(self)

    def getTransformations(self):
        return _iegenlib.Computation_getTransformations(self)

    def getIterSpaces(self):
        return _iegenlib.Computation_getIterSpaces(self)

    def codeGen(self, knownConstraints=None):
        return _iegenlib.Computation_codeGen(self, knownConstraints)

    @staticmethod
    def omegaCodeGenFromString(relationArity, iterSpacesStr, known):
        return _iegenlib.Computation_omegaCodeGenFromString(relationArity, iterSpacesStr, known)

    def toOmegaString(self):
        return _iegenlib.Computation_toOmegaString(self)

    @staticmethod
    def activeStatementComparator(a, b):
        return _iegenlib.Computation_activeStatementComparator(a, b)

    def reschedule(self, s1, s2):
        return _iegenlib.Computation_reschedule(self, s1, s2)

    def fuse(self, s1, s2, fuseLevel):
        return _iegenlib.Computation_fuse(self, s1, s2, fuseLevel)

    def delimitDataSpacesInStmt(self, stmt):
        return _iegenlib.Computation_delimitDataSpacesInStmt(self, stmt)

    def delimitDataSpacesInString(self, originalString):
        return _iegenlib.Computation_delimitDataSpacesInString(self, originalString)

    @staticmethod
    def delimitDataSpaceName(dataSpaceName):
        return _iegenlib.Computation_delimitDataSpaceName(dataSpaceName)

    @staticmethod
    def stripDataSpaceDelimiter(delimitedStr):
        return _iegenlib.Computation_stripDataSpaceDelimiter(delimitedStr)

    @staticmethod
    def nameIsDelimited(name):
        return _iegenlib.Computation_nameIsDelimited(name)

# Register Computation in _iegenlib:
_iegenlib.Computation_swigregister(Computation)

def Computation_resetNumRenamesCounters():
    return _iegenlib.Computation_resetNumRenamesCounters()

def Computation_getPrefixedDataSpaceName(originalName, prefix):
    return _iegenlib.Computation_getPrefixedDataSpaceName(originalName, prefix)

def Computation_trimISDataSpaces(*args):
    return _iegenlib.Computation_trimISDataSpaces(*args)

def Computation_isGuaranteedExecute(stmt1, stmt2):
    return _iegenlib.Computation_isGuaranteedExecute(stmt1, stmt2)

def Computation_getSetConstraints(set):
    return _iegenlib.Computation_getSetConstraints(set)

def Computation_getArrayAccessStrs(unroll, access, tuple, arrName, idxs):
    return _iegenlib.Computation_getArrayAccessStrs(unroll, access, tuple, arrName, idxs)

def Computation_trimDataSpaceName(dataSpaceName):
    return _iegenlib.Computation_trimDataSpaceName(dataSpaceName)

def Computation_getOriginalDataSpaceName(dataSpaceName):
    return _iegenlib.Computation_getOriginalDataSpaceName(dataSpaceName)

def Computation_areEquivalentRenames(a, b):
    return _iegenlib.Computation_areEquivalentRenames(a, b)

def Computation_omegaCodeGenFromString(relationArity, iterSpacesStr, known):
    return _iegenlib.Computation_omegaCodeGenFromString(relationArity, iterSpacesStr, known)

def Computation_activeStatementComparator(a, b):
    return _iegenlib.Computation_activeStatementComparator(a, b)

def Computation_delimitDataSpaceName(dataSpaceName):
    return _iegenlib.Computation_delimitDataSpaceName(dataSpaceName)

def Computation_stripDataSpaceDelimiter(delimitedStr):
    return _iegenlib.Computation_stripDataSpaceDelimiter(delimitedStr)

def Computation_nameIsDelimited(name):
    return _iegenlib.Computation_nameIsDelimited(name)

class AppendComputationResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tuplePosition = property(_iegenlib.AppendComputationResult_tuplePosition_get, _iegenlib.AppendComputationResult_tuplePosition_set)
    returnValues = property(_iegenlib.AppendComputationResult_returnValues_get, _iegenlib.AppendComputationResult_returnValues_set)

    def __init__(self):
        _iegenlib.AppendComputationResult_swiginit(self, _iegenlib.new_AppendComputationResult())
    __swig_destroy__ = _iegenlib.delete_AppendComputationResult

# Register AppendComputationResult in _iegenlib:
_iegenlib.AppendComputationResult_swigregister(AppendComputationResult)

class Stmt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _iegenlib.delete_Stmt

    def __init__(self, *args):
        _iegenlib.Stmt_swiginit(self, _iegenlib.new_Stmt(*args))

    def replaceRead(self, searchStr, replaceStr):
        return _iegenlib.Stmt_replaceRead(self, searchStr, replaceStr)

    def replaceReadDataSpace(self, searchStr, replaceStr):
        return _iegenlib.Stmt_replaceReadDataSpace(self, searchStr, replaceStr)

    def replaceReadSourceCode(self, searchStr, replaceStr):
        return _iegenlib.Stmt_replaceReadSourceCode(self, searchStr, replaceStr)

    def replaceWrite(self, searchStr, replaceStr):
        return _iegenlib.Stmt_replaceWrite(self, searchStr, replaceStr)

    def replaceWriteDataSpace(self, searchStr, replaceStr):
        return _iegenlib.Stmt_replaceWriteDataSpace(self, searchStr, replaceStr)

    def replaceWriteSourceCode(self, searchStr, replaceStr):
        return _iegenlib.Stmt_replaceWriteSourceCode(self, searchStr, replaceStr)

    def replaceDataSpace(self, searchString, replaceString):
        return _iegenlib.Stmt_replaceDataSpace(self, searchString, replaceString)

    def __assign__(self, other):
        return _iegenlib.Stmt___assign__(self, other)

    def __eq__(self, other):
        return _iegenlib.Stmt___eq__(self, other)

    def __ne__(self, other):
        return _iegenlib.Stmt___ne__(self, other)

    def getUniquelyNamedClone(self, prefix, dataSpaceNames):
        return _iegenlib.Stmt_getUniquelyNamedClone(self, prefix, dataSpaceNames)

    def isComplete(self):
        return _iegenlib.Stmt_isComplete(self)

    def getStmtSourceCode(self):
        return _iegenlib.Stmt_getStmtSourceCode(self)

    def setStmtSourceCode(self, newStmtSourceCode):
        return _iegenlib.Stmt_setStmtSourceCode(self, newStmtSourceCode)

    def getIterationSpace(self):
        return _iegenlib.Stmt_getIterationSpace(self)

    def setIterationSpace(self, *args):
        return _iegenlib.Stmt_setIterationSpace(self, *args)

    def getExecutionSchedule(self):
        return _iegenlib.Stmt_getExecutionSchedule(self)

    def setExecutionSchedule(self, *args):
        return _iegenlib.Stmt_setExecutionSchedule(self, *args)

    def addRead(self, *args):
        return _iegenlib.Stmt_addRead(self, *args)

    def updateRead(self, idx, dataSpace, relationStr):
        return _iegenlib.Stmt_updateRead(self, idx, dataSpace, relationStr)

    def getNumReads(self):
        return _iegenlib.Stmt_getNumReads(self)

    def getReadDataSpace(self, index):
        return _iegenlib.Stmt_getReadDataSpace(self, index)

    def getReadRelation(self, index):
        return _iegenlib.Stmt_getReadRelation(self, index)

    def addWrite(self, *args):
        return _iegenlib.Stmt_addWrite(self, *args)

    def updateWrite(self, idx, dataSpace, relationStr):
        return _iegenlib.Stmt_updateWrite(self, idx, dataSpace, relationStr)

    def getNumWrites(self):
        return _iegenlib.Stmt_getNumWrites(self)

    def getWriteDataSpace(self, index):
        return _iegenlib.Stmt_getWriteDataSpace(self, index)

    def getWriteRelation(self, index):
        return _iegenlib.Stmt_getWriteRelation(self, index)

    def getConstArrayAccesses(self, index, read):
        return _iegenlib.Stmt_getConstArrayAccesses(self, index, read)

    def setDebugStr(self, str):
        return _iegenlib.Stmt_setDebugStr(self, str)

    def getDebugStr(self):
        return _iegenlib.Stmt_getDebugStr(self)

    def getAllDebugStr(self):
        return _iegenlib.Stmt_getAllDebugStr(self)

    def __str__(self):
        return _iegenlib.Stmt___str__(self)

    def isPhiNode(self):
        return _iegenlib.Stmt_isPhiNode(self)

    def setPhiNode(self, val):
        return _iegenlib.Stmt_setPhiNode(self, val)

    def isArrayAccess(self):
        return _iegenlib.Stmt_isArrayAccess(self)

    def setArrayAccess(self, val):
        return _iegenlib.Stmt_setArrayAccess(self, val)

    def isDelimited(self):
        return _iegenlib.Stmt_isDelimited(self)

    def setDelimited(self):
        return _iegenlib.Stmt_setDelimited(self)

# Register Stmt in _iegenlib:
_iegenlib.Stmt_swigregister(Stmt)



